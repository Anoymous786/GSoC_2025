name: Update Contributor Avatars

on:
  pull_request:
    types: [closed]
    branches: [ main ]
  push:
    branches: [ main ]
    paths:
      - 'README.md'
  schedule:
    - cron: '0 0 * * *'  # Run daily to check for new contributors

jobs:
  update-avatars:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true || github.event_name == 'push' || github.event_name == 'schedule'
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests PyGithub

      - name: Update README with avatars
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python - <<EOF
          import re
          import os
          from github import Github
          
          # List of usernames to exclude
          EXCLUDED_USERS = {
              'github-actions[bot]', 
              'actions-user', 
              'github-actions', 
              'dependabot[bot]',
              'dependabot-preview[bot]'
          }

          def extract_github_username(line):
              patterns = [
                  r'https://github\.com/([^)/\s]+)',  # Standard GitHub URL
                  r'\[@([^)\s]+)\]',                  # [@username] format
                  r'\[([^]]+)\]\(https://github\.com/([^)]+)\)'  # [name](url) format
              ]
              for pattern in patterns:
                  match = re.search(pattern, line)
                  if match:
                      # If it's the [name](url) format, use group(2), otherwise group(1)
                      username = match.group(2) if len(match.groups()) > 1 and match.group(2) else match.group(1)
                      return username
              return None

          def create_avatar_section(usernames):
              avatar_html = """<div align="center">
          """
              for username in sorted(usernames):
                  if username not in EXCLUDED_USERS:
                      avatar_html += f'  <a href="https://github.com/{username}"><img src="https://github.com/{username}.png" width="60px" alt="{username}" /></a>\n'
              avatar_html += "</div>\n"
              return avatar_html

          def clean_org_list(content):
              start = content.find("## Org Submission Checklist")
              if start == -1:
                  return content
              
              next_section = content.find("##", start + 10)
              if next_section == -1:
                  return content
                  
              org_section = content[start:next_section].strip()
              lines = org_section.split('\n')
              
              seen = set()
              unique_lines = []
              for line in lines:
                  line = line.strip()
                  if line and line not in seen and line.startswith('- ['):
                      seen.add(line)
                      unique_lines.append(line)
              
              new_section = "## Org Submission Checklist\n\n" + "\n".join(unique_lines) + "\n\n"
              return content[:start] + new_section + content[next_section:]

          # Initialize GitHub API
          g = Github(os.getenv('GITHUB_TOKEN'))
          repo = g.get_repo(os.getenv('GITHUB_REPOSITORY'))

          # Get all contributors from GitHub
          contributors = set()
          for contributor in repo.get_contributors():
              username = contributor.login
              if username not in EXCLUDED_USERS:
                  contributors.add(username)

          # Add PR author if this is a merged PR
          if os.getenv('GITHUB_EVENT_NAME') == 'pull_request':
              pr_number = os.getenv('GITHUB_EVENT_PULL_REQUEST_NUMBER')
              if pr_number:
                  pr = repo.get_pull(int(pr_number))
                  if pr.merged and pr.user.login not in EXCLUDED_USERS:
                      contributors.add(pr.user.login)

          # Read README
          with open('README.md', 'r', encoding='utf-8') as f:
              content = f.read()

          # Clean up duplicate orgs
          content = clean_org_list(content)

          # Find contributors section
          contributors_section = re.search(r'<!-- Add contributors below -->(.*?)\n\n', content, re.DOTALL)
          if not contributors_section:
              exit(0)

          # Get existing contributors from README
          existing_usernames = set()
          existing_lines = []
          for line in contributors_section.group(1).split('\n'):
              if line.strip() and line.strip().startswith('-'):
                  username = extract_github_username(line)
                  if username and username not in EXCLUDED_USERS:
                      existing_usernames.add(username)
                      existing_lines.append(line)

          # Add new contributors from GitHub
          new_lines = []
          for contributor in contributors:
              if contributor not in existing_usernames and contributor not in EXCLUDED_USERS:
                  try:
                      user = g.get_user(contributor)
                      name = user.name or contributor
                      new_lines.append(f"- [{name}](https://github.com/{contributor})")
                      existing_usernames.add(contributor)
                  except Exception as e:
                      print(f"Error getting info for {contributor}: {e}")
                      continue

          # Update contributors section if there are new contributors
          if new_lines:
              all_lines = existing_lines + new_lines
              new_section = "<!-- Add contributors below -->\n" + "\n".join(all_lines)
              content = content.replace(contributors_section.group(0), new_section + "\n\n")

          # Create and update avatar section
          avatar_section = create_avatar_section(existing_usernames)
          avatar_pattern = r'<div align="center">.*?<\/div>\n'
          if re.search(avatar_pattern, content, re.DOTALL):
              content = re.sub(avatar_pattern, avatar_section, content, flags=re.DOTALL)
          else:
              content = re.sub(r'(<!-- Add contributors below -->.*?\n)\n*(##)', r'\1\n' + avatar_section + r'\2', content, flags=re.DOTALL)

          # Write updated README
          with open('README.md', 'w', encoding='utf-8') as f:
              f.write(content)
          EOF

      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git diff --quiet && git diff --staged --quiet || (
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              git commit -m "Update README with new contributor ${{ github.event.pull_request.user.login }}"
            elif [[ "${{ github.event_name }}" == "schedule" ]]; then
              git commit -m "Update README with new contributors from repository"
            else
              git commit -m "Update README and clean up org list"
            fi
          )
          git push 