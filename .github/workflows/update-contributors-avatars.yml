name: Update Contributor Avatars and Org List

on:
  repository_dispatch:
    types: [update-contributors]
  pull_request_target:
    types: [closed]
  push:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'  # Run daily to check for new contributors
  workflow_dispatch:  # Allow manual trigger

jobs:
  update-readme:
    runs-on: ubuntu-latest
    if: github.event_name == 'repository_dispatch' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' || github.event_name == 'push' || (github.event_name == 'pull_request_target' && github.event.pull_request.merged == true)
    permissions:
      contents: write
      pull-requests: read
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests PyGithub

      - name: Update README
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python - <<EOF
          import re
          import os
          from github import Github
          
          EXCLUDED_USERS = {
              'github-actions[bot]', 
              'actions-user', 
              'github-actions', 
              'dependabot[bot]',
              'dependabot-preview[bot]'
          }

          def extract_github_username(line):
              patterns = [
                  r'https://github\.com/([^)/\s]+)',
                  r'\[@([^)\s]+)\]',
                  r'\[([^]]+)\]\(https://github\.com/([^)]+)\)'
              ]
              for pattern in patterns:
                  match = re.search(pattern, line)
                  if match:
                      username = match.group(2) if len(match.groups()) > 1 and match.group(2) else match.group(1)
                      return username
              return None

          def create_avatar_section(usernames):
              avatar_html = """<div align="center">
          """
              for username in sorted(usernames):
                  if username not in EXCLUDED_USERS:
                      avatar_html += f'  <a href="https://github.com/{username}"><img src="https://github.com/{username}.png" width="60px" alt="{username}" /></a>\n'
              avatar_html += "</div>\n\n"  # Added extra newline for spacing
              return avatar_html

          def clean_org_list(content):
              # Find the org section with more precise pattern
              org_match = re.search(r'(## Org Submission Checklist\s*\n\n)((?:- \[.\][^\n]*\n)*)', content, re.MULTILINE)
              if not org_match:
                  return content

              # Get unique org entries while preserving order
              org_lines = [line.strip() for line in org_match.group(2).split('\n') if line.strip()]
              seen = set()
              unique_lines = []
              for line in org_lines:
                  if line and line.startswith('- [') and line not in seen:
                      seen.add(line)
                      unique_lines.append(line)

              # Replace the org section with unique entries
              new_org_section = org_match.group(1) + '\n'.join(unique_lines) + '\n\n'
              return content[:org_match.start()] + new_org_section + content[org_match.end():]

          # Initialize GitHub API
          g = Github(os.getenv('GITHUB_TOKEN'))
          repo = g.get_repo(os.getenv('GITHUB_REPOSITORY'))

          # Get all contributors from GitHub
          contributors = set()
          try:
              for contributor in repo.get_contributors():
                  username = contributor.login
                  if username not in EXCLUDED_USERS:
                      contributors.add(username)
          except Exception as e:
              print(f"Error getting contributors: {e}")

          # Add PR author if this is a merged PR
          event_name = os.getenv('GITHUB_EVENT_NAME')
          if event_name == 'pull_request_target':
              pr_number = os.getenv('GITHUB_EVENT_PULL_REQUEST_NUMBER')
              if pr_number:
                  try:
                      pr = repo.get_pull(int(pr_number))
                      if pr.merged and pr.user.login not in EXCLUDED_USERS:
                          contributors.add(pr.user.login)
                  except Exception as e:
                      print(f"Error getting PR info: {e}")

          # Read and clean README content
          with open('README.md', 'r', encoding='utf-8') as f:
              content = f.read()

          # First, clean up the org list
          content = clean_org_list(content)

          # Then handle contributors section
          contributors_section = re.search(r'(<!-- Add contributors below -->.*?)(?=\n*##|\Z)', content, re.DOTALL)
          if not contributors_section:
              print("Contributors section not found")
              exit(1)

          # Get existing contributors
          existing_usernames = set()
          existing_lines = []
          for line in contributors_section.group(1).split('\n'):
              if line.strip() and line.strip().startswith('-'):
                  username = extract_github_username(line)
                  if username and username not in EXCLUDED_USERS:
                      existing_usernames.add(username)
                      existing_lines.append(line)

          # Add new contributors
          new_lines = []
          for contributor in contributors:
              if contributor not in existing_usernames and contributor not in EXCLUDED_USERS:
                  try:
                      user = g.get_user(contributor)
                      name = user.name or contributor
                      new_lines.append(f"- [{name}](https://github.com/{contributor})")
                      existing_usernames.add(contributor)
                  except Exception as e:
                      print(f"Error getting info for {contributor}: {e}")
                      continue

          # Update contributors section if there are changes
          if new_lines:
              all_lines = existing_lines + new_lines
              new_section = "<!-- Add contributors below -->\n" + "\n".join(all_lines)
              content = content.replace(contributors_section.group(0), new_section + "\n\n")

          # Update avatar section with proper spacing
          avatar_section = create_avatar_section(existing_usernames)
          avatar_pattern = r'<div align="center">.*?<\/div>\n*'
          if re.search(avatar_pattern, content, re.DOTALL):
              content = re.sub(avatar_pattern, avatar_section, content, flags=re.DOTALL)
          else:
              content = re.sub(r'(<!-- Add contributors below -->.*?\n)\n*(##)', r'\1\n' + avatar_section + r'\2', content, flags=re.DOTALL)

          # Ensure proper spacing before Proposal Count
          content = re.sub(r'\n+## Proposal Count', r'\n\n## Proposal Count', content)

          # Write updated README
          with open('README.md', 'w', encoding='utf-8') as f:
              f.write(content)
          EOF

      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git diff --quiet && git diff --staged --quiet || (
            if [[ "${{ github.event_name }}" == "pull_request_target" ]]; then
              git commit -m "Update README with new contributor ${{ github.event.pull_request.user.login }} and clean up org list"
            elif [[ "${{ github.event_name }}" == "schedule" ]]; then
              git commit -m "Update README with new contributors and clean up org list"
            else
              git commit -m "Update README organization list and contributors"
            fi
          )
          git push 